// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: main.sql

package persistence

import (
	"context"
	"database/sql"
)

const createActivity = `-- name: CreateActivity :one
INSERT INTO activity (order_id, user_id, action, details) VALUES ($1, $2, $3, $4) RETURNING id, order_id, user_id, date, action, details
`

type CreateActivityParams struct {
	OrderID sql.NullInt32
	UserID  sql.NullInt32
	Action  sql.NullString
	Details sql.NullString
}

// CreateActivity
//
//	INSERT INTO activity (order_id, user_id, action, details) VALUES ($1, $2, $3, $4) RETURNING id, order_id, user_id, date, action, details
func (q *Queries) CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error) {
	row := q.db.QueryRowContext(ctx, createActivity,
		arg.OrderID,
		arg.UserID,
		arg.Action,
		arg.Details,
	)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Date,
		&i.Action,
		&i.Details,
	)
	return i, err
}

const createClient = `-- name: CreateClient :one
INSERT INTO clients (name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
RETURNING id, name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes
`

type CreateClientParams struct {
	Name          string
	Address       sql.NullString
	District      sql.NullString
	City          sql.NullString
	Country       sql.NullString
	Phone         sql.NullString
	Ruc           sql.NullString
	ContactPerson sql.NullString
	Email         sql.NullString
	Website       sql.NullString
	AddressLine2  sql.NullString
	PostalCode    sql.NullString
	Fax           sql.NullString
	Notes         sql.NullString
}

// CreateClient
//
//	INSERT INTO clients (name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes)
//	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
//	RETURNING id, name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes
func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.Name,
		arg.Address,
		arg.District,
		arg.City,
		arg.Country,
		arg.Phone,
		arg.Ruc,
		arg.ContactPerson,
		arg.Email,
		arg.Website,
		arg.AddressLine2,
		arg.PostalCode,
		arg.Fax,
		arg.Notes,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.District,
		&i.City,
		&i.Country,
		&i.Phone,
		&i.Ruc,
		&i.ContactPerson,
		&i.Email,
		&i.Website,
		&i.AddressLine2,
		&i.PostalCode,
		&i.Fax,
		&i.Notes,
	)
	return i, err
}

const createComment = `-- name: CreateComment :one
INSERT INTO comments (order_id, user_id, comment) VALUES ($1, $2, $3) RETURNING id, order_id, user_id, date, comment
`

type CreateCommentParams struct {
	OrderID sql.NullInt32
	UserID  sql.NullInt32
	Comment sql.NullString
}

// CreateComment
//
//	INSERT INTO comments (order_id, user_id, comment) VALUES ($1, $2, $3) RETURNING id, order_id, user_id, date, comment
func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment, arg.OrderID, arg.UserID, arg.Comment)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Date,
		&i.Comment,
	)
	return i, err
}

const createEquipment = `-- name: CreateEquipment :one
INSERT INTO equipments (type_id, name, serial_number, notes) VALUES ($1, $2, $3, $4) RETURNING id, type_id, name, serial_number, notes
`

type CreateEquipmentParams struct {
	TypeID       sql.NullInt32
	Name         string
	SerialNumber string
	Notes        sql.NullString
}

// CreateEquipment
//
//	INSERT INTO equipments (type_id, name, serial_number, notes) VALUES ($1, $2, $3, $4) RETURNING id, type_id, name, serial_number, notes
func (q *Queries) CreateEquipment(ctx context.Context, arg CreateEquipmentParams) (Equipment, error) {
	row := q.db.QueryRowContext(ctx, createEquipment,
		arg.TypeID,
		arg.Name,
		arg.SerialNumber,
		arg.Notes,
	)
	var i Equipment
	err := row.Scan(
		&i.ID,
		&i.TypeID,
		&i.Name,
		&i.SerialNumber,
		&i.Notes,
	)
	return i, err
}

const createEquipmentType = `-- name: CreateEquipmentType :one
INSERT INTO equipment_types (name) VALUES ($1) RETURNING id, name
`

// CreateEquipmentType
//
//	INSERT INTO equipment_types (name) VALUES ($1) RETURNING id, name
func (q *Queries) CreateEquipmentType(ctx context.Context, name string) (EquipmentType, error) {
	row := q.db.QueryRowContext(ctx, createEquipmentType, name)
	var i EquipmentType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, priority)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, creation_date, priority
`

type CreateOrderParams struct {
	ClientID      sql.NullInt32
	EquipmentID   sql.NullInt32
	OrderNumber   string
	ReportedIssue sql.NullString
	Diagnosis     sql.NullString
	Solution      sql.NullString
	EstimatedTime sql.NullInt64
	Budget        sql.NullString
	StatusID      sql.NullInt32
	AssignedTo    sql.NullInt32
	Priority      sql.NullString
}

// CreateOrder
//
//	INSERT INTO orders (client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, priority)
//	VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
//	RETURNING id, client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, creation_date, priority
func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ClientID,
		arg.EquipmentID,
		arg.OrderNumber,
		arg.ReportedIssue,
		arg.Diagnosis,
		arg.Solution,
		arg.EstimatedTime,
		arg.Budget,
		arg.StatusID,
		arg.AssignedTo,
		arg.Priority,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.EquipmentID,
		&i.OrderNumber,
		&i.ReportedIssue,
		&i.Diagnosis,
		&i.Solution,
		&i.EstimatedTime,
		&i.Budget,
		&i.StatusID,
		&i.AssignedTo,
		&i.CreationDate,
		&i.Priority,
	)
	return i, err
}

const createOrderStatus = `-- name: CreateOrderStatus :one
INSERT INTO order_status (name) VALUES ($1) RETURNING id, name
`

// CreateOrderStatus
//
//	INSERT INTO order_status (name) VALUES ($1) RETURNING id, name
func (q *Queries) CreateOrderStatus(ctx context.Context, name string) (OrderStatus, error) {
	row := q.db.QueryRowContext(ctx, createOrderStatus, name)
	var i OrderStatus
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, permission_type, inactive_status, password)
VALUES ($1, $2, $3, $4, $5) RETURNING id, name, email, password, permission_type, creation_date, inactive_status
`

type CreateUserParams struct {
	Name           string
	Email          string
	PermissionType string
	InactiveStatus sql.NullString
	Password       sql.NullString
}

// CreateUser
//
//	INSERT INTO users (name, email, permission_type, inactive_status, password)
//	VALUES ($1, $2, $3, $4, $5) RETURNING id, name, email, password, permission_type, creation_date, inactive_status
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Name,
		arg.Email,
		arg.PermissionType,
		arg.InactiveStatus,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PermissionType,
		&i.CreationDate,
		&i.InactiveStatus,
	)
	return i, err
}

const deleteClientByID = `-- name: DeleteClientByID :exec
DELETE FROM clients WHERE id = $1
`

// DeleteClientByID
//
//	DELETE FROM clients WHERE id = $1
func (q *Queries) DeleteClientByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteClientByID, id)
	return err
}

const deleteCommentByID = `-- name: DeleteCommentByID :exec
DELETE FROM comments WHERE id = $1
`

// DeleteCommentByID
//
//	DELETE FROM comments WHERE id = $1
func (q *Queries) DeleteCommentByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteCommentByID, id)
	return err
}

const deleteEquipmentByID = `-- name: DeleteEquipmentByID :exec
DELETE FROM equipments WHERE id = $1
`

// DeleteEquipmentByID
//
//	DELETE FROM equipments WHERE id = $1
func (q *Queries) DeleteEquipmentByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteEquipmentByID, id)
	return err
}

const deleteOrderByID = `-- name: DeleteOrderByID :exec
DELETE FROM orders WHERE id = $1
`

// DeleteOrderByID
//
//	DELETE FROM orders WHERE id = $1
func (q *Queries) DeleteOrderByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteOrderByID, id)
	return err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE id = $1
`

// DeleteUserByID
//
//	DELETE FROM users WHERE id = $1
func (q *Queries) DeleteUserByID(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const getActivityByID = `-- name: GetActivityByID :one
SELECT id, order_id, user_id, date, action, details FROM activity WHERE id = $1
`

// GetActivityByID
//
//	SELECT id, order_id, user_id, date, action, details FROM activity WHERE id = $1
func (q *Queries) GetActivityByID(ctx context.Context, id int32) (Activity, error) {
	row := q.db.QueryRowContext(ctx, getActivityByID, id)
	var i Activity
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Date,
		&i.Action,
		&i.Details,
	)
	return i, err
}

const getClientByID = `-- name: GetClientByID :one
SELECT id, name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes FROM clients WHERE id = $1
`

// GetClientByID
//
//	SELECT id, name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes FROM clients WHERE id = $1
func (q *Queries) GetClientByID(ctx context.Context, id int32) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClientByID, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Address,
		&i.District,
		&i.City,
		&i.Country,
		&i.Phone,
		&i.Ruc,
		&i.ContactPerson,
		&i.Email,
		&i.Website,
		&i.AddressLine2,
		&i.PostalCode,
		&i.Fax,
		&i.Notes,
	)
	return i, err
}

const getCommentByID = `-- name: GetCommentByID :one
SELECT id, order_id, user_id, date, comment FROM comments WHERE id = $1
`

// GetCommentByID
//
//	SELECT id, order_id, user_id, date, comment FROM comments WHERE id = $1
func (q *Queries) GetCommentByID(ctx context.Context, id int32) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentByID, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.UserID,
		&i.Date,
		&i.Comment,
	)
	return i, err
}

const getEquipmentByID = `-- name: GetEquipmentByID :one
SELECT id, type_id, name, serial_number, notes FROM equipments WHERE id = $1
`

// GetEquipmentByID
//
//	SELECT id, type_id, name, serial_number, notes FROM equipments WHERE id = $1
func (q *Queries) GetEquipmentByID(ctx context.Context, id int32) (Equipment, error) {
	row := q.db.QueryRowContext(ctx, getEquipmentByID, id)
	var i Equipment
	err := row.Scan(
		&i.ID,
		&i.TypeID,
		&i.Name,
		&i.SerialNumber,
		&i.Notes,
	)
	return i, err
}

const getEquipmentTypeByID = `-- name: GetEquipmentTypeByID :one
SELECT id, name FROM equipment_types WHERE id = $1
`

// GetEquipmentTypeByID
//
//	SELECT id, name FROM equipment_types WHERE id = $1
func (q *Queries) GetEquipmentTypeByID(ctx context.Context, id int32) (EquipmentType, error) {
	row := q.db.QueryRowContext(ctx, getEquipmentTypeByID, id)
	var i EquipmentType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
SELECT id, client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, creation_date, priority FROM orders WHERE id = $1
`

// GetOrderByID
//
//	SELECT id, client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, creation_date, priority FROM orders WHERE id = $1
func (q *Queries) GetOrderByID(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrderByID, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.EquipmentID,
		&i.OrderNumber,
		&i.ReportedIssue,
		&i.Diagnosis,
		&i.Solution,
		&i.EstimatedTime,
		&i.Budget,
		&i.StatusID,
		&i.AssignedTo,
		&i.CreationDate,
		&i.Priority,
	)
	return i, err
}

const getOrderStatusByID = `-- name: GetOrderStatusByID :one
SELECT id, name FROM order_status WHERE id = $1
`

// GetOrderStatusByID
//
//	SELECT id, name FROM order_status WHERE id = $1
func (q *Queries) GetOrderStatusByID(ctx context.Context, id int32) (OrderStatus, error) {
	row := q.db.QueryRowContext(ctx, getOrderStatusByID, id)
	var i OrderStatus
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password, permission_type, creation_date, inactive_status FROM users WHERE id = $1
`

// GetUserByID
//
//	SELECT id, name, email, password, permission_type, creation_date, inactive_status FROM users WHERE id = $1
func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.PermissionType,
		&i.CreationDate,
		&i.InactiveStatus,
	)
	return i, err
}

const listActivityByOrderID = `-- name: ListActivityByOrderID :many
SELECT id, order_id, user_id, date, action, details FROM activity WHERE order_id = $3 ORDER BY id OFFSET $1 LIMIT $2
`

type ListActivityByOrderIDParams struct {
	Offset  int32
	Limit   int32
	OrderID sql.NullInt32
}

// offset: $1
// limit: $2
//
//	SELECT id, order_id, user_id, date, action, details FROM activity WHERE order_id = $3 ORDER BY id OFFSET $1 LIMIT $2
func (q *Queries) ListActivityByOrderID(ctx context.Context, arg ListActivityByOrderIDParams) ([]Activity, error) {
	rows, err := q.db.QueryContext(ctx, listActivityByOrderID, arg.Offset, arg.Limit, arg.OrderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Activity
	for rows.Next() {
		var i Activity
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.UserID,
			&i.Date,
			&i.Action,
			&i.Details,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllClients = `-- name: ListAllClients :many
SELECT id, name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes FROM clients ORDER BY id OFFSET $1 LIMIT $2
`

type ListAllClientsParams struct {
	Offset int32
	Limit  int32
}

// offset: $1
// limit: $2
//
//	SELECT id, name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes FROM clients ORDER BY id OFFSET $1 LIMIT $2
func (q *Queries) ListAllClients(ctx context.Context, arg ListAllClientsParams) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listAllClients, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Address,
			&i.District,
			&i.City,
			&i.Country,
			&i.Phone,
			&i.Ruc,
			&i.ContactPerson,
			&i.Email,
			&i.Website,
			&i.AddressLine2,
			&i.PostalCode,
			&i.Fax,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllEquipmentTypes = `-- name: ListAllEquipmentTypes :many
SELECT id, name FROM equipment_types ORDER BY id OFFSET $1 LIMIT $2
`

type ListAllEquipmentTypesParams struct {
	Offset int32
	Limit  int32
}

// offset: $1
// limit: $2
//
//	SELECT id, name FROM equipment_types ORDER BY id OFFSET $1 LIMIT $2
func (q *Queries) ListAllEquipmentTypes(ctx context.Context, arg ListAllEquipmentTypesParams) ([]EquipmentType, error) {
	rows, err := q.db.QueryContext(ctx, listAllEquipmentTypes, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EquipmentType
	for rows.Next() {
		var i EquipmentType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllEquipments = `-- name: ListAllEquipments :many
SELECT id, type_id, name, serial_number, notes FROM equipments ORDER BY id OFFSET $1 LIMIT $2
`

type ListAllEquipmentsParams struct {
	Offset int32
	Limit  int32
}

// offset: $1
// limit: $2
//
//	SELECT id, type_id, name, serial_number, notes FROM equipments ORDER BY id OFFSET $1 LIMIT $2
func (q *Queries) ListAllEquipments(ctx context.Context, arg ListAllEquipmentsParams) ([]Equipment, error) {
	rows, err := q.db.QueryContext(ctx, listAllEquipments, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Equipment
	for rows.Next() {
		var i Equipment
		if err := rows.Scan(
			&i.ID,
			&i.TypeID,
			&i.Name,
			&i.SerialNumber,
			&i.Notes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllOrderStatus = `-- name: ListAllOrderStatus :many
SELECT id, name FROM order_status ORDER BY id OFFSET $1 LIMIT $2
`

type ListAllOrderStatusParams struct {
	Offset int32
	Limit  int32
}

// offset: $1
// limit: $2
//
//	SELECT id, name FROM order_status ORDER BY id OFFSET $1 LIMIT $2
func (q *Queries) ListAllOrderStatus(ctx context.Context, arg ListAllOrderStatusParams) ([]OrderStatus, error) {
	rows, err := q.db.QueryContext(ctx, listAllOrderStatus, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderStatus
	for rows.Next() {
		var i OrderStatus
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllOrders = `-- name: ListAllOrders :many
SELECT id, client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, creation_date, priority FROM orders ORDER BY id OFFSET $1 LIMIT $2
`

type ListAllOrdersParams struct {
	Offset int32
	Limit  int32
}

// offset: $1
// limit: $2
//
//	SELECT id, client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, creation_date, priority FROM orders ORDER BY id OFFSET $1 LIMIT $2
func (q *Queries) ListAllOrders(ctx context.Context, arg ListAllOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listAllOrders, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.EquipmentID,
			&i.OrderNumber,
			&i.ReportedIssue,
			&i.Diagnosis,
			&i.Solution,
			&i.EstimatedTime,
			&i.Budget,
			&i.StatusID,
			&i.AssignedTo,
			&i.CreationDate,
			&i.Priority,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllUsers = `-- name: ListAllUsers :many
SELECT id, name, email, password, permission_type, creation_date, inactive_status FROM users ORDER BY id OFFSET $1 LIMIT $2
`

type ListAllUsersParams struct {
	Offset int32
	Limit  int32
}

// offset: $1
// limit: $2
//
//	SELECT id, name, email, password, permission_type, creation_date, inactive_status FROM users ORDER BY id OFFSET $1 LIMIT $2
func (q *Queries) ListAllUsers(ctx context.Context, arg ListAllUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listAllUsers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.PermissionType,
			&i.CreationDate,
			&i.InactiveStatus,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCommentsByOrderID = `-- name: ListCommentsByOrderID :many
SELECT id, order_id, user_id, date, comment FROM comments WHERE order_id = $3 ORDER BY id OFFSET $1 LIMIT $2
`

type ListCommentsByOrderIDParams struct {
	Offset  int32
	Limit   int32
	OrderID sql.NullInt32
}

// offset: $1
// limit: $2
//
//	SELECT id, order_id, user_id, date, comment FROM comments WHERE order_id = $3 ORDER BY id OFFSET $1 LIMIT $2
func (q *Queries) ListCommentsByOrderID(ctx context.Context, arg ListCommentsByOrderIDParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listCommentsByOrderID, arg.Offset, arg.Limit, arg.OrderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.UserID,
			&i.Date,
			&i.Comment,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClientByID = `-- name: UpdateClientByID :exec
UPDATE clients SET name = $2, address = $3, district = $4, city = $5, country = $6, phone = $7, ruc = $8, contact_person = $9, email = $10, website = $11, address_line_2 = $12, postal_code = $13, fax = $14, notes = $15 WHERE id = $1
`

type UpdateClientByIDParams struct {
	ID            int32
	Name          string
	Address       sql.NullString
	District      sql.NullString
	City          sql.NullString
	Country       sql.NullString
	Phone         sql.NullString
	Ruc           sql.NullString
	ContactPerson sql.NullString
	Email         sql.NullString
	Website       sql.NullString
	AddressLine2  sql.NullString
	PostalCode    sql.NullString
	Fax           sql.NullString
	Notes         sql.NullString
}

// UpdateClientByID
//
//	UPDATE clients SET name = $2, address = $3, district = $4, city = $5, country = $6, phone = $7, ruc = $8, contact_person = $9, email = $10, website = $11, address_line_2 = $12, postal_code = $13, fax = $14, notes = $15 WHERE id = $1
func (q *Queries) UpdateClientByID(ctx context.Context, arg UpdateClientByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateClientByID,
		arg.ID,
		arg.Name,
		arg.Address,
		arg.District,
		arg.City,
		arg.Country,
		arg.Phone,
		arg.Ruc,
		arg.ContactPerson,
		arg.Email,
		arg.Website,
		arg.AddressLine2,
		arg.PostalCode,
		arg.Fax,
		arg.Notes,
	)
	return err
}

const updateCommentByID = `-- name: UpdateCommentByID :exec
UPDATE comments SET comment = $2 WHERE id = $1
`

type UpdateCommentByIDParams struct {
	ID      int32
	Comment sql.NullString
}

// UpdateCommentByID
//
//	UPDATE comments SET comment = $2 WHERE id = $1
func (q *Queries) UpdateCommentByID(ctx context.Context, arg UpdateCommentByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateCommentByID, arg.ID, arg.Comment)
	return err
}

const updateEquipmentByID = `-- name: UpdateEquipmentByID :exec
UPDATE equipments SET type_id = $2, name = $3, serial_number = $4, notes = $5 WHERE id = $1
`

type UpdateEquipmentByIDParams struct {
	ID           int32
	TypeID       sql.NullInt32
	Name         string
	SerialNumber string
	Notes        sql.NullString
}

// UpdateEquipmentByID
//
//	UPDATE equipments SET type_id = $2, name = $3, serial_number = $4, notes = $5 WHERE id = $1
func (q *Queries) UpdateEquipmentByID(ctx context.Context, arg UpdateEquipmentByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateEquipmentByID,
		arg.ID,
		arg.TypeID,
		arg.Name,
		arg.SerialNumber,
		arg.Notes,
	)
	return err
}

const updateEquipmentTypeByID = `-- name: UpdateEquipmentTypeByID :exec
UPDATE equipment_types SET name = $2 WHERE id = $1
`

type UpdateEquipmentTypeByIDParams struct {
	ID   int32
	Name string
}

// UpdateEquipmentTypeByID
//
//	UPDATE equipment_types SET name = $2 WHERE id = $1
func (q *Queries) UpdateEquipmentTypeByID(ctx context.Context, arg UpdateEquipmentTypeByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateEquipmentTypeByID, arg.ID, arg.Name)
	return err
}

const updateOrderByID = `-- name: UpdateOrderByID :exec
UPDATE orders SET client_id = $2, equipment_id = $3, order_number = $4, reported_issue = $5, diagnosis = $6, solution = $7, estimated_time = $8, budget = $9, status_id = $10, assigned_to = $11, priority = $12
WHERE id = $1
`

type UpdateOrderByIDParams struct {
	ID            int32
	ClientID      sql.NullInt32
	EquipmentID   sql.NullInt32
	OrderNumber   string
	ReportedIssue sql.NullString
	Diagnosis     sql.NullString
	Solution      sql.NullString
	EstimatedTime sql.NullInt64
	Budget        sql.NullString
	StatusID      sql.NullInt32
	AssignedTo    sql.NullInt32
	Priority      sql.NullString
}

// UpdateOrderByID
//
//	UPDATE orders SET client_id = $2, equipment_id = $3, order_number = $4, reported_issue = $5, diagnosis = $6, solution = $7, estimated_time = $8, budget = $9, status_id = $10, assigned_to = $11, priority = $12
//	WHERE id = $1
func (q *Queries) UpdateOrderByID(ctx context.Context, arg UpdateOrderByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderByID,
		arg.ID,
		arg.ClientID,
		arg.EquipmentID,
		arg.OrderNumber,
		arg.ReportedIssue,
		arg.Diagnosis,
		arg.Solution,
		arg.EstimatedTime,
		arg.Budget,
		arg.StatusID,
		arg.AssignedTo,
		arg.Priority,
	)
	return err
}

const updateOrderStatusByID = `-- name: UpdateOrderStatusByID :exec
UPDATE order_status SET name = $2 WHERE id = $1
`

type UpdateOrderStatusByIDParams struct {
	ID   int32
	Name string
}

// UpdateOrderStatusByID
//
//	UPDATE order_status SET name = $2 WHERE id = $1
func (q *Queries) UpdateOrderStatusByID(ctx context.Context, arg UpdateOrderStatusByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatusByID, arg.ID, arg.Name)
	return err
}

const updateUserByID = `-- name: UpdateUserByID :exec
UPDATE users SET name = $2, email = $3, permission_type = $4, inactive_status = $5, password = $6
WHERE id = $1
`

type UpdateUserByIDParams struct {
	ID             int32
	Name           string
	Email          string
	PermissionType string
	InactiveStatus sql.NullString
	Password       sql.NullString
}

// UpdateUserByID
//
//	UPDATE users SET name = $2, email = $3, permission_type = $4, inactive_status = $5, password = $6
//	WHERE id = $1
func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserByID,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.PermissionType,
		arg.InactiveStatus,
		arg.Password,
	)
	return err
}
