// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package persistence

import (
	"context"
)

type Querier interface {
	//CreateActivity
	//
	//  INSERT INTO activity (order_id, user_id, action, details) VALUES ($1, $2, $3, $4) RETURNING id, order_id, user_id, date, action, details
	CreateActivity(ctx context.Context, arg CreateActivityParams) (Activity, error)
	//CreateClient
	//
	//  INSERT INTO clients (name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes)
	//  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
	//  RETURNING id, name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes
	CreateClient(ctx context.Context, arg CreateClientParams) (Client, error)
	//CreateComment
	//
	//  INSERT INTO comments (order_id, user_id, comment) VALUES ($1, $2, $3) RETURNING id, order_id, user_id, date, comment
	CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error)
	//CreateEquipment
	//
	//  INSERT INTO equipments (type_id, name, serial_number, notes) VALUES ($1, $2, $3, $4) RETURNING id, type_id, name, serial_number, notes
	CreateEquipment(ctx context.Context, arg CreateEquipmentParams) (Equipment, error)
	//CreateEquipmentType
	//
	//  INSERT INTO equipment_types (name) VALUES ($1) RETURNING id, name
	CreateEquipmentType(ctx context.Context, name string) (EquipmentType, error)
	//CreateOrder
	//
	//  INSERT INTO orders (client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, priority)
	//  VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
	//  RETURNING id, client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, creation_date, priority
	CreateOrder(ctx context.Context, arg CreateOrderParams) (Order, error)
	//CreateOrderStatus
	//
	//  INSERT INTO order_status (name) VALUES ($1) RETURNING id, name
	CreateOrderStatus(ctx context.Context, name string) (OrderStatus, error)
	//CreateUser
	//
	//  INSERT INTO users (name, email, permission_type, inactive_status, password)
	//  VALUES ($1, $2, $3, $4, $5) RETURNING id, name, email, password, permission_type, creation_date, inactive_status
	CreateUser(ctx context.Context, arg CreateUserParams) (User, error)
	//DeleteClientByID
	//
	//  DELETE FROM clients WHERE id = $1
	DeleteClientByID(ctx context.Context, id int32) error
	//DeleteCommentByID
	//
	//  DELETE FROM comments WHERE id = $1
	DeleteCommentByID(ctx context.Context, id int32) error
	//DeleteEquipmentByID
	//
	//  DELETE FROM equipments WHERE id = $1
	DeleteEquipmentByID(ctx context.Context, id int32) error
	//DeleteOrderByID
	//
	//  DELETE FROM orders WHERE id = $1
	DeleteOrderByID(ctx context.Context, id int32) error
	//DeleteUserByID
	//
	//  DELETE FROM users WHERE id = $1
	DeleteUserByID(ctx context.Context, id int32) error
	//GetActivityByID
	//
	//  SELECT id, order_id, user_id, date, action, details FROM activity WHERE id = $1
	GetActivityByID(ctx context.Context, id int32) (Activity, error)
	//GetClientByID
	//
	//  SELECT id, name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes FROM clients WHERE id = $1
	GetClientByID(ctx context.Context, id int32) (Client, error)
	//GetCommentByID
	//
	//  SELECT id, order_id, user_id, date, comment FROM comments WHERE id = $1
	GetCommentByID(ctx context.Context, id int32) (Comment, error)
	//GetEquipmentByID
	//
	//  SELECT id, type_id, name, serial_number, notes FROM equipments WHERE id = $1
	GetEquipmentByID(ctx context.Context, id int32) (Equipment, error)
	//GetEquipmentTypeByID
	//
	//  SELECT id, name FROM equipment_types WHERE id = $1
	GetEquipmentTypeByID(ctx context.Context, id int32) (EquipmentType, error)
	//GetOrderByID
	//
	//  SELECT id, client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, creation_date, priority FROM orders WHERE id = $1
	GetOrderByID(ctx context.Context, id int32) (Order, error)
	//GetOrderStatusByID
	//
	//  SELECT id, name FROM order_status WHERE id = $1
	GetOrderStatusByID(ctx context.Context, id int32) (OrderStatus, error)
	//GetUserByID
	//
	//  SELECT id, name, email, password, permission_type, creation_date, inactive_status FROM users WHERE id = $1
	GetUserByID(ctx context.Context, id int32) (User, error)
	// offset: $1
	// limit: $2
	//
	//  SELECT id, order_id, user_id, date, action, details FROM activity WHERE order_id = $3 ORDER BY id OFFSET $1 LIMIT $2
	ListActivityByOrderID(ctx context.Context, arg ListActivityByOrderIDParams) ([]Activity, error)
	// offset: $1
	// limit: $2
	//
	//  SELECT id, name, address, district, city, country, phone, ruc, contact_person, email, website, address_line_2, postal_code, fax, notes FROM clients ORDER BY id OFFSET $1 LIMIT $2
	ListAllClients(ctx context.Context, arg ListAllClientsParams) ([]Client, error)
	// offset: $1
	// limit: $2
	//
	//  SELECT id, name FROM equipment_types ORDER BY id OFFSET $1 LIMIT $2
	ListAllEquipmentTypes(ctx context.Context, arg ListAllEquipmentTypesParams) ([]EquipmentType, error)
	// offset: $1
	// limit: $2
	//
	//  SELECT id, type_id, name, serial_number, notes FROM equipments ORDER BY id OFFSET $1 LIMIT $2
	ListAllEquipments(ctx context.Context, arg ListAllEquipmentsParams) ([]Equipment, error)
	// offset: $1
	// limit: $2
	//
	//  SELECT id, name FROM order_status ORDER BY id OFFSET $1 LIMIT $2
	ListAllOrderStatus(ctx context.Context, arg ListAllOrderStatusParams) ([]OrderStatus, error)
	// offset: $1
	// limit: $2
	//
	//  SELECT id, client_id, equipment_id, order_number, reported_issue, diagnosis, solution, estimated_time, budget, status_id, assigned_to, creation_date, priority FROM orders ORDER BY id OFFSET $1 LIMIT $2
	ListAllOrders(ctx context.Context, arg ListAllOrdersParams) ([]Order, error)
	// offset: $1
	// limit: $2
	//
	//  SELECT id, name, email, password, permission_type, creation_date, inactive_status FROM users ORDER BY id OFFSET $1 LIMIT $2
	ListAllUsers(ctx context.Context, arg ListAllUsersParams) ([]User, error)
	// offset: $1
	// limit: $2
	//
	//  SELECT id, order_id, user_id, date, comment FROM comments WHERE order_id = $3 ORDER BY id OFFSET $1 LIMIT $2
	ListCommentsByOrderID(ctx context.Context, arg ListCommentsByOrderIDParams) ([]Comment, error)
	//UpdateClientByID
	//
	//  UPDATE clients SET name = $2, address = $3, district = $4, city = $5, country = $6, phone = $7, ruc = $8, contact_person = $9, email = $10, website = $11, address_line_2 = $12, postal_code = $13, fax = $14, notes = $15 WHERE id = $1
	UpdateClientByID(ctx context.Context, arg UpdateClientByIDParams) error
	//UpdateCommentByID
	//
	//  UPDATE comments SET comment = $2 WHERE id = $1
	UpdateCommentByID(ctx context.Context, arg UpdateCommentByIDParams) error
	//UpdateEquipmentByID
	//
	//  UPDATE equipments SET type_id = $2, name = $3, serial_number = $4, notes = $5 WHERE id = $1
	UpdateEquipmentByID(ctx context.Context, arg UpdateEquipmentByIDParams) error
	//UpdateEquipmentTypeByID
	//
	//  UPDATE equipment_types SET name = $2 WHERE id = $1
	UpdateEquipmentTypeByID(ctx context.Context, arg UpdateEquipmentTypeByIDParams) error
	//UpdateOrderByID
	//
	//  UPDATE orders SET client_id = $2, equipment_id = $3, order_number = $4, reported_issue = $5, diagnosis = $6, solution = $7, estimated_time = $8, budget = $9, status_id = $10, assigned_to = $11, priority = $12
	//  WHERE id = $1
	UpdateOrderByID(ctx context.Context, arg UpdateOrderByIDParams) error
	//UpdateOrderStatusByID
	//
	//  UPDATE order_status SET name = $2 WHERE id = $1
	UpdateOrderStatusByID(ctx context.Context, arg UpdateOrderStatusByIDParams) error
	//UpdateUserByID
	//
	//  UPDATE users SET name = $2, email = $3, permission_type = $4, inactive_status = $5, password = $6
	//  WHERE id = $1
	UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) error
}

var _ Querier = (*Queries)(nil)
